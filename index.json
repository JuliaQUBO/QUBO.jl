[{"id":3,"pagetitle":"Home","title":"QUBO.jl Documentation","ref":"/QUBO.jl/QUBO.jl/stable/#QUBO.jl-Documentation","content":" QUBO.jl Documentation"},{"id":4,"pagetitle":"Home","title":"Introduction","ref":"/QUBO.jl/QUBO.jl/stable/#Introduction","content":" Introduction QUBO.jl  is an all-in-one package for working with QUBO formulations in  JuMP  and interfacing with QUBO solvers. This project aggregates three complementary packages:  ToQUBO.jl ,  QUBODrivers.jl  and  QUBOTools.jl ."},{"id":5,"pagetitle":"Home","title":"QUBO?","ref":"/QUBO.jl/QUBO.jl/stable/#QUBO?","content":" QUBO? QUBO is an acronym for  Quadratic Unconstrained Binary Optimization . So every QUBO problem is comprised of: a linear or quadratic objective function no constraints binary variables We can represent such problem as follows: \\[\\begin{array}{rl}\n   \\min          & \\mathbf{x}' Q\\,\\mathbf{x} \\\\\n   \\textrm{s.t.} & \\mathbf{x} \\in \\mathbb{B}^{n}\n\\end{array}\\] QUBOs are suited for representing non-convex global optimization problems. With that said, the significant advances in computing systems and algorithms specialized for sampling QUBOs have contributed to their popularity. Some of the paradigms that stand out for running QUBOs are quantum gate-based optimization algorithms (QAOA and VQE), quantum annealers and hardware-accelerated platforms (Coherent Ising Machines and Simulated Bifurcation Machines)."},{"id":6,"pagetitle":"Home","title":"QUBO.jl  features","ref":"/QUBO.jl/QUBO.jl/stable/#QUBO.jl-features","content":" QUBO.jl  features QUBO.Jl  main features are spreaded into its three subpackages: ToQUBO.jl :  reformulate general JuMP problems into the QUBO format.  QUBODrivers.jl : define a simple interface to connect with these solvers using a  MOI -compliant API.   QUBOTools.jl :   a set of methods to work with different formats for QUBO. More features are available in the documentation."},{"id":7,"pagetitle":"Home","title":"Quick Start","ref":"/QUBO.jl/QUBO.jl/stable/#Quick-Start","content":" Quick Start"},{"id":8,"pagetitle":"Home","title":"Instalation","ref":"/QUBO.jl/QUBO.jl/stable/#Instalation","content":" Instalation julia> ]add https://github.com/JuliaQUBO/QUBO.jl#master"},{"id":9,"pagetitle":"Home","title":"Example","ref":"/QUBO.jl/QUBO.jl/stable/#Example","content":" Example using JuMP\nusing QUBO\n\nmodel = Model(() -> ToQUBO.Optimizer(ExactSampler.Optimizer))\n\n@variable(model, x[1:3], Bin)\n@constraint(model, 0.3*x[1] + 0.5*x[2] + 1.0*x[3] <= 1.6)\n@objective(model, Max, 1.0*x[1] + 2.0*x[2] + 3.0*x[3])\n\noptimize!(model)\n\nfor i = 1:result_count(model)\n    xi = value.(x, result = i)\n    yi = objective_value(model, result = i)\n\n    println(\"f($xi) = $yi\")\nend\n QUBO.jl Packages"},{"id":12,"pagetitle":"Design","title":"Design","ref":"/QUBO.jl/QUBO.jl/stable/design/#Design","content":" Design"},{"id":15,"pagetitle":"Home","title":"QUBODrivers.jl Documentation","ref":"/QUBO.jl/QUBODrivers.jl/stable/#QUBODrivers.jl-Documentation","content":" QUBODrivers.jl Documentation"},{"id":16,"pagetitle":"Home","title":"Introduction","ref":"/QUBO.jl/QUBODrivers.jl/stable/#Introduction","content":" Introduction This package aims to provide a common  MOI -compliant API for  QUBO  Sampling & Annealing machines. It also contains a few utility samplers and testing tools for performance comparison, sanity checks and basic analysis features."},{"id":17,"pagetitle":"Home","title":"Quick Start","ref":"/QUBO.jl/QUBODrivers.jl/stable/#Quick-Start","content":" Quick Start"},{"id":18,"pagetitle":"Home","title":"Installation","ref":"/QUBO.jl/QUBODrivers.jl/stable/#Installation","content":" Installation QUBODrivers.jl  is registered in Julia's General Registry and is available for download using the standard package manager. julia> import Pkg\n\njulia> Pkg.add(\"QUBODrivers\")"},{"id":19,"pagetitle":"Home","title":"Example","ref":"/QUBO.jl/QUBODrivers.jl/stable/#Example","content":" Example using JuMP\nusing QUBODrivers\n\nmodel = Model(ExactSampler.Optimizer)\n\nQ = [\n    -1.0  2.0  2.0\n     2.0 -1.0  2.0\n     2.0  2.0 -1.0\n]\n\n@variable(model, x[1:3], Bin)\n@objective(model, Min, x' * Q * x)\n\noptimize!(model)\n\nfor i = 1:result_count(model)\n    xi = value.(x; result=i)\n    yi = objective_value(model; result=i)\n\n    println(\"f($xi) = $yi\")\nend f([0.0, 1.0, 0.0]) = -1.0\nf([1.0, 0.0, 0.0]) = -1.0\nf([0.0, 0.0, 1.0]) = -1.0\nf([0.0, 0.0, 0.0]) = 0.0\nf([1.0, 0.0, 1.0]) = 2.0\nf([1.0, 1.0, 0.0]) = 2.0\nf([0.0, 1.0, 1.0]) = 2.0\nf([1.0, 1.0, 1.0]) = 9.0 <!– ## Citing QUBODrivers.jl @software{QUBODrivers.jl:2023,\n  author    = {Pedro Xavier and Pedro Ripper and Tiago Andrade and Joaquim Garcia and David Bernal},\n  title     = {QUBODrivers.jl},\n  month     = {apr},\n  year      = {2023},\n  publisher = {Zenodo},\n  version   = {v0.1.0},\n  doi       = {10.5281/zenodo.6390515},\n  url       = {https://doi.org/10.5281/zenodo.6390515}\n} –>"},{"id":22,"pagetitle":"Itroduction","title":"QUBODrivers.jl Booklet","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/1-intro/#QUBODrivers.jl-Booklet","content":" QUBODrivers.jl Booklet This booklet aims to provide an advanced overview of the QUBODrivers.jl package, delving into the details of the package's inner workings. It is meant to discuss the package's design choices and provide a guide for developers who wish not only to implement new interfaces but also to extend the package's functionality. Reading this booklet is not required to use the package, but it is strongly recommended for those who wish to contribute to the project."},{"id":23,"pagetitle":"Itroduction","title":"Table of Contents","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/1-intro/#Table-of-Contents","content":" Table of Contents Sampler Interface Attributes API An advanced example"},{"id":26,"pagetitle":"Sampler Interface","title":"Sampler Interface","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/2-interface/#Sampler-Interface","content":" Sampler Interface"},{"id":27,"pagetitle":"Sampler Interface","title":"QUBODrivers.AbstractSampler","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/2-interface/#QUBODrivers.AbstractSampler","content":" QUBODrivers.AbstractSampler  —  Type AbstractSampler{T} <: MOI.AbstractOptimizer source"},{"id":28,"pagetitle":"Sampler Interface","title":"QUBODrivers.set_model!","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/2-interface/#QUBODrivers.set_model!","content":" QUBODrivers.set_model!  —  Function set_model! source"},{"id":31,"pagetitle":"Attribute System","title":"Attributes","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/3-attributes/#Attributes","content":" Attributes"},{"id":32,"pagetitle":"Attribute System","title":"API","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/3-attributes/#API","content":" API"},{"id":33,"pagetitle":"Attribute System","title":"QUBODrivers.SamplerAttribute","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/3-attributes/#QUBODrivers.SamplerAttribute","content":" QUBODrivers.SamplerAttribute  —  Type SamplerAttribute source"},{"id":34,"pagetitle":"Attribute System","title":"QUBODrivers.RawSamplerAttribute","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/3-attributes/#QUBODrivers.RawSamplerAttribute","content":" QUBODrivers.RawSamplerAttribute  —  Type RawSamplerAttribute{key} source"},{"id":35,"pagetitle":"Attribute System","title":"QUBODrivers.@raw_attr_str","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/3-attributes/#QUBODrivers.@raw_attr_str","content":" QUBODrivers.@raw_attr_str  —  Macro @raw_attr_str source"},{"id":36,"pagetitle":"Attribute System","title":"QUBODrivers.get_raw_attr","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/3-attributes/#QUBODrivers.get_raw_attr","content":" QUBODrivers.get_raw_attr  —  Function get_raw_attr source"},{"id":37,"pagetitle":"Attribute System","title":"QUBODrivers.set_raw_attr!","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/3-attributes/#QUBODrivers.set_raw_attr!","content":" QUBODrivers.set_raw_attr!  —  Function set_raw_attr! source"},{"id":38,"pagetitle":"Attribute System","title":"QUBODrivers.default_raw_attr","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/3-attributes/#QUBODrivers.default_raw_attr","content":" QUBODrivers.default_raw_attr  —  Function default_raw_attr source"},{"id":39,"pagetitle":"Attribute System","title":"An advanced example","ref":"/QUBO.jl/QUBODrivers.jl/stable/booklet/3-attributes/#An-advanced-example","content":" An advanced example module SuperSampler\n\nimport QUBODrivers\nimport QUBODrivers: QUBOTools\nimport MathOptInterface as MOI\n\nQUBODrivers.@setup Optimizer begin\n    name    = \"Super Sampler\"\n    version = v\"1.0.2\"\n    attributes = begin\n        NumberOfReads[\"num_reads\"]::Integer  = 100_000\n        SuperAttribute[\"super_attr\"]::String = \"super\"\n    end\nend\n\nfunction MOI.set(sampler::Optimizer, attr::raw_attr\"\", value)\n    if !(value isa Integer)\n        error(\"'num_reads' must be an integer\")\n    else\n        QUBODrivers.set_raw_attr!(sampler, attr, value)\n    end\n\n    return nothing\nend\n\nfunction MOI.set(sampler::Optimizer, attr::raw_attr\"super_attr\", value)\n    if !(value isa AbstractString)\n        error(\"'super_attr' must be a string\")\n    elseif !(value ∈ (\"super\", \"ultra\", \"mega\"))\n        error(\"'super_attr' must be one of the following: 'super', 'ultra', 'mega'\")\n    else\n        QUBODrivers.set_raw_attr!(sampler, attr, value)\n    end\n\n    return nothing\nend\n\nend # SuperSampler module"},{"id":42,"pagetitle":"Introduction","title":"Introduction","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/1-intro/#Introduction","content":" Introduction"},{"id":43,"pagetitle":"Introduction","title":"QUBO","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/1-intro/#QUBO","content":" QUBO An optimization problem is in its QUBO form if it is written as \\[\\begin{array}{rl}\n           \\min & \\alpha \\left[ \\mathbf{x}'\\mathbf{Q}\\,\\mathbf{x} + \\mathbf{\\ell}'\\mathbf{x} + \\beta \\right] \\\\\n    \\text{s.t.} & \\mathbf{x} \\in S \\cong \\mathbb{B}^{n}\n\\end{array}\\] with linear terms  $\\mathbf{\\ell} \\in \\mathbb{R}^{n}$  and quadratic  $\\mathbf{Q} \\in \\mathbb{R}^{n \\times n}$ .  $\\alpha, \\beta \\in \\mathbb{R}$  are, respectively, the scaling and offset factors. The MOI-JuMP optimizers defined using the  QUBODrivers.AbstractSampler{T} <: MOI.AbstractOptimizer  interface only support models given in the QUBO form.  QUBODrivers.jl  employs  QUBOTools  on many tasks involving data management and querying. It is worth taking a look at  QUBOTool's docs ."},{"id":44,"pagetitle":"Introduction","title":"Table of Contents","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/1-intro/#Table-of-Contents","content":" Table of Contents Solving QUBO Solving Simple QUBO Model with QUBODrivers'  RandomSampler.Optimizer Samplers Utility Samplers Showcase Sampler Setup Imports The  QUBODrivers.@setup  macro The  QUBODrivers.sample  method A complete example Test Suite Benchmarking"},{"id":47,"pagetitle":"Solving QUBO","title":"Solving QUBO","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/2-solve/#Solving-QUBO","content":" Solving QUBO"},{"id":48,"pagetitle":"Solving QUBO","title":"Solving Simple QUBO Model with QUBODrivers'  RandomSampler.Optimizer","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/2-solve/#Solving-Simple-QUBO-Model-with-QUBODrivers'-[RandomSampler.Optimizer](@ref)","content":" Solving Simple QUBO Model with QUBODrivers'  RandomSampler.Optimizer using JuMP\nusing QUBODrivers\n\nmodel = Model(RandomSampler.Optimizer)\n\nQ = [\n    -1.0  2.0  2.0\n     2.0 -1.0  2.0\n     2.0  2.0 -1.0\n]\n\n@variable(model, x[1:3], Bin)\n@objective(model, Min, x' * Q * x)\n\noptimize!(model)"},{"id":49,"pagetitle":"Solving QUBO","title":"Recover Results","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/2-solve/#Recover-Results","content":" Recover Results for i = 1:result_count(model)\n    xi = value.(x; result=i)              # Solution vector\n    yi = objective_value(model; result=i) # Energy\n\n    println(\"f($xi) = $(yi)\")\nend f([1.0, 0.0, 0.0]) = -1.0\nf([0.0, 0.0, 1.0]) = -1.0\nf([0.0, 1.0, 0.0]) = -1.0\nf([0.0, 0.0, 0.0]) = 0.0\nf([1.0, 0.0, 1.0]) = 2.0\nf([1.0, 1.0, 0.0]) = 2.0\nf([0.0, 1.0, 1.0]) = 2.0\nf([1.0, 1.0, 1.0]) = 9.0"},{"id":52,"pagetitle":"Samplers","title":"Samplers","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/3-samplers/#Samplers","content":" Samplers"},{"id":53,"pagetitle":"Samplers","title":"Utility Samplers","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/3-samplers/#Utility-Samplers","content":" Utility Samplers"},{"id":54,"pagetitle":"Samplers","title":"Exact Sampler","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/3-samplers/#Exact-Sampler","content":" Exact Sampler"},{"id":55,"pagetitle":"Samplers","title":"QUBODrivers.ExactSampler.Optimizer","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/3-samplers/#QUBODrivers.ExactSampler.Optimizer","content":" QUBODrivers.ExactSampler.Optimizer  —  Type ExactSampler.Optimizer{T} This sampler performs an exhaustive search over all  $2^{n}$  possible states. Warn Due to the exponetially large amount of visited states, it is not possible to use this sampler for problems any larger than  $20$  variables big. source"},{"id":56,"pagetitle":"Samplers","title":"Random Sampler","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/3-samplers/#Random-Sampler","content":" Random Sampler"},{"id":57,"pagetitle":"Samplers","title":"QUBODrivers.RandomSampler.Optimizer","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/3-samplers/#QUBODrivers.RandomSampler.Optimizer","content":" QUBODrivers.RandomSampler.Optimizer  —  Type RandomSampler.Optimizer{T} Attributes RandomSeed ,  \"seed\" : Random seed to initialize the random number generator. NumberOfReads ,  \"num_reads\" : Number of random states sampled per run. RandomGenerator ,  \"rng\" : Random Number Generator instance. source"},{"id":58,"pagetitle":"Samplers","title":"Identity Sampler","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/3-samplers/#Identity-Sampler","content":" Identity Sampler"},{"id":59,"pagetitle":"Samplers","title":"QUBODrivers.IdentitySampler.Optimizer","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/3-samplers/#QUBODrivers.IdentitySampler.Optimizer","content":" QUBODrivers.IdentitySampler.Optimizer  —  Type IdentitySampler.Optimizer{T} This sampler selects precisely the state vector provided as warm-start. source"},{"id":60,"pagetitle":"Samplers","title":"Showcase","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/3-samplers/#Showcase","content":" Showcase Before explaining in detail how to use this package, it's good to list a few examples for the reader to grasp. Below, there are links to the files containing the actual interface implementations. These are mostly thin wrappers interfacing with common algorithms and heuristics written in Python, Julia or C/C++. Project Source Code DWave.jl DWave DWaveNeal.jl DWaveNeal IsingSolvers.jl GreedyDescent ILP MCMCRandom QuantumAnnealingInterface.jl QuantumAnnealingInterface CIMOptimizer.jl CIMOptimizer"},{"id":63,"pagetitle":"Sampler Setup","title":"Sampler Setup","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/4-setup/#Sampler-Setup","content":" Sampler Setup This guide aims to provide a tutorial on how to implement new sampler interfaces using  QUBODrivers.jl . To get your QUBO sampler running right now,  QUBODrivers.jl  will require only two main ingredients: a  QUBODrivers.@setup  macro call and a  QUBODrivers.sample  method implementation."},{"id":64,"pagetitle":"Sampler Setup","title":"Imports","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/4-setup/#Imports","content":" Imports First things first, we are going to import both  QUBODrivers.jl  and also  MathOptInterface.jl , commonly aliased as  MOI . Although not strictly necessary, we recommend that you also import  QUBOTools.jl for convenience, as it provides many useful functions for QUBO manipulation. It is readly available in the  QUBODrivers  module. import QUBODrivers\nimport QUBODrivers: QUBOTools\nimport MathOptInterface as MOI"},{"id":65,"pagetitle":"Sampler Setup","title":"The  QUBODrivers.@setup  macro","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/4-setup/#The-[QUBODrivers.@setup](@ref)-macro","content":" The  QUBODrivers.@setup  macro"},{"id":66,"pagetitle":"Sampler Setup","title":"QUBODrivers.@setup","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/4-setup/#QUBODrivers.@setup","content":" QUBODrivers.@setup  —  Macro @setup(expr) The  @setup  macro receives a  begin ... end  block with an attribute definition on each of the block's statements. Sampler Attributes All attributes must be presented as an assignment to the default value of that attribute. To create a MathOptInterface optimizer attribute, an identifier must be present on the left hand side. If a solver-specific, raw attribute is desired, its name must be given as a string, e.g. between double quotes. In the special case where an attribute could be accessed in both ways, the identifier must be followed by the parenthesised raw attribute string. In any case, the attribute type can be specified typing the type assertion operator  ::  followed by the type itself just before the equal sign. For example, a list of the valid syntax variations for the  number of reads  attribute follows:     -  \"num_reads\" = 1_000      -  \"num_reads\"::Integer = 1_000      -  NumberOfReads = 1_000      -  NumberOfReads::Integer = 1_000      -  NumberOfReads(\"num_reads\") = 1_000      -  NumberOfReads(\"num_reads\")::Integer = 1_000 Example QUBODrivers.@setup Optimizer begin\n    name       = \"Super Sampler\"\n    version    = v\"1.0.2\"\n    attributes = begin\n        NumberOfReads[\"num_reads\"]::Integer  = 1_000\n        SuperAttribute[\"super_attr\"]         = nothing\n        MegaAttribute::Union{String,Nothing} = \"mega\"\n    end\nend source This macro takes two arguments: the identifier of the sampler's  struct  (usually  Optimizer ), and a  begin...end  block containing configuration parameters as  key-value  pairs. The first parameter of the configuration block is the sampler's name, which will be used to identify it in the  MOI.SolverName  attribute. The next entry is the  version  assignment, which is accessed by the  MOI.SolverVersion  attribute. In order to consistently support  semantic versioning  it is required that the version number comes as a  v-string  e.g.  v\"major.minor.patch\" . Note If missing, the  version  parameter matches the current version of  QUBODrivers.jl . A simple yet valid  @setup  call would look like this: QUBODrivers.@setup Optimizer begin\n    name    = \"Super Sampler\"\n    version = v\"1.0.2\"\nend We expect that most users will be happy with this approach and it is likely that it will fit most use cases."},{"id":67,"pagetitle":"Sampler Setup","title":"Attributes","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/4-setup/#Attributes","content":" Attributes The  attributes  parameter is also given by a  begin...end  block and contains the sampler's attributes. These attributes are used to configure the sampler's behavior and are accessed by the  MOI.get  method. QUBODrivers.@setup Optimizer begin\n    name    = \"Super Sampler\"\n    version = v\"1.0.2\"\n    attributes = begin\n        NumberOfReads[\"num_reads\"]::Integer = 1_000\n        SuperAttribute::String = \"super\"\n    end\nend"},{"id":68,"pagetitle":"Sampler Setup","title":"The  QUBODrivers.sample  method","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/4-setup/#The-[QUBODrivers.sample](@ref)-method","content":" The  QUBODrivers.sample  method"},{"id":69,"pagetitle":"Sampler Setup","title":"QUBODrivers.sample","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/4-setup/#QUBODrivers.sample","content":" QUBODrivers.sample  —  Function sample(::AbstractSampler{T})::SampleSet{T} where {T} source"},{"id":70,"pagetitle":"Sampler Setup","title":"The [ QUBODrivers.SampleSet ] collection","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/4-setup/#The-[QUBODrivers.SampleSet]-collection","content":" The [ QUBODrivers.SampleSet ] collection"},{"id":71,"pagetitle":"Sampler Setup","title":"A complete example","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/4-setup/#A-complete-example","content":" A complete example module SuperSampler\n\nimport QUBODrivers\nimport QUBODrivers: QUBOTools\nimport MathOptInterface as MOI\n\n@doc raw\"\"\"\n    SuperSampler.Optimizer\n\nThis sampler is super!\n\"\"\"\nQUBODrivers.@setup Optimizer begin\n    name    = \"Super Sampler\"\n    version = v\"1.0.2\"\n    attributes = begin\n        NumberOfReads[\"num_reads\"]::Integer = 1_000\n        SuperAttribute::String = \"super\"\n    end\nend\n\nfunction QUBODrivers.sample(sampler::Optimizer{T}) where {T}\n    # ~ Is your annealer running on the Ising Model? Have this:\n    n, h, J, α, β = QUBOTools.ising(\n        sampler,\n        :dense; # Here we opt for a dense matrix representation\n        sense = :max,\n    )\n\n    # ~ Retrieve Attributes using MathOptInterface ~ #\n    num_reads  = MOI.get(sampler, NumberOfReads())\n    super_attr = MOI.get(sampler, SuperAttribute())\n\n    # ~ Do some sampling ~ #\n    samples = QUBOTools.Sample{T,Int}[]\n\n    clock = @timed for _ = 1:num_reads\n        ψ = super_sample(n, h, J, super_attr)\n        λ = QUBOTools.value(ψ, h, J, α, β)\n\n        s = QUBOTools.Sample{T,Int}(ψ, λ)\n\n        push!(samples, s)\n    end\n\n    # ~ Store some metadata ~ #\n    metadata = Dict{String,Any}(\n        \"num_reads\"  => num_reads,\n        \"super_attr\" => super_attr,\n        \"time\"       => clock.time,\n    )\n\n    # ~ Return a SampleSet ~ #\n    return QUBOTools.SampleSet(samples, metadata; sense=:max, domain=:spin)\nend\n\nfunction super_sample(n, h, J, super_attr)\n    # ~ Do some super sampling (using C/C++) ~ #\n    ψ = ccall(\n        :super_sample,\n        Vector{Int},\n        (\n            Cint,\n            Ptr{Float64},\n            Ptr{Ptr{Float64}},\n            Cstring\n        ),\n        n,\n        h,\n        J,\n        super_attr,\n    )\n\n    return ψ\nend\n\nend # module"},{"id":74,"pagetitle":"Test Suite","title":"Test Suite","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/5-tests/#Test-Suite","content":" Test Suite Besides establishing the connection between QUBO solvers and JuMP, this package also provides a test suite to ensure that the interface is implemented correctly."},{"id":75,"pagetitle":"Test Suite","title":"QUBODrivers.test","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/5-tests/#QUBODrivers.test","content":" QUBODrivers.test  —  Function test(optimizer::Type{S}; examples::Bool=false) where {S<:AbstractSampler}\ntest(config!::Function, optimizer::Type{S}; examples::Bool=false) where {S<:AbstractSampler} source"},{"id":78,"pagetitle":"Benchmarking","title":"Benchmarking","ref":"/QUBO.jl/QUBODrivers.jl/stable/manual/6-benchmarks/#Benchmarking","content":" Benchmarking"}]