var documenterSearchIndex = {"docs":
[{"location":"manual/4-setup/#Sampler-Setup","page":"Sampler Setup","title":"Sampler Setup","text":"","category":"section"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"This guide aims to provide a tutorial on how to implement new sampler interfaces using QUBODrivers.jl. To get your QUBO sampler running right now, QUBODrivers.jl will require only two main ingredients: a QUBODrivers.@setup macro call and a QUBODrivers.sample method implementation.","category":"page"},{"location":"manual/4-setup/#Imports","page":"Sampler Setup","title":"Imports","text":"","category":"section"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"First things first, we are going to import both QUBODrivers.jl and also MathOptInterface.jl, commonly aliased as MOI. Although not strictly necessary, we recommend that you also import QUBOTools.jlfor convenience, as it provides many useful functions for QUBO manipulation. It is readly available in the QUBODrivers module.","category":"page"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"import QUBODrivers\nimport QUBODrivers: QUBOTools\nimport MathOptInterface as MOI","category":"page"},{"location":"manual/4-setup/#The-[QUBODrivers.@setup](@ref)-macro","page":"Sampler Setup","title":"The QUBODrivers.@setup macro","text":"","category":"section"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"QUBODrivers.@setup","category":"page"},{"location":"manual/4-setup/#QUBODrivers.@setup","page":"Sampler Setup","title":"QUBODrivers.@setup","text":"@setup(expr)\n\nThe @setup macro receives a begin ... end block with an attribute definition on each of the block's statements.\n\nSampler Attributes\n\nAll attributes must be presented as an assignment to the default value of that attribute. To create a MathOptInterface optimizer attribute, an identifier must be present on the left hand side. If a solver-specific, raw attribute is desired, its name must be given as a string, e.g. between double quotes. In the special case where an attribute could be accessed in both ways, the identifier must be followed by the parenthesised raw attribute string. In any case, the attribute type can be specified typing the type assertion operator :: followed by the type itself just before the equal sign.\n\nFor example, a list of the valid syntax variations for the number of reads attribute follows:     - \"num_reads\" = 1_000     - \"num_reads\"::Integer = 1_000     - NumberOfReads = 1_000     - NumberOfReads::Integer = 1_000     - NumberOfReads(\"num_reads\") = 1_000     - NumberOfReads(\"num_reads\")::Integer = 1_000\n\nExample\n\nQUBODrivers.@setup Optimizer begin\n    name       = \"Super Sampler\"\n    version    = v\"1.0.2\"\n    attributes = begin\n        NumberOfReads[\"num_reads\"]::Integer  = 1_000\n        SuperAttribute[\"super_attr\"]         = nothing\n        MegaAttribute::Union{String,Nothing} = \"mega\"\n    end\nend\n\n\n\n\n\n","category":"macro"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"This macro takes two arguments: the identifier of the sampler's struct (usually Optimizer), and a begin...end block containing configuration parameters as key-value pairs.","category":"page"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"The first parameter of the configuration block is the sampler's name, which will be used to identify it in the MOI.SolverName attribute.","category":"page"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"The next entry is the version assignment, which is accessed by the MOI.SolverVersion attribute. In order to consistently support semantic versioning it is required that the version number comes as a v-string e.g. v\"major.minor.patch\".","category":"page"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"note: Note\nIf missing, the version parameter matches the current version of QUBODrivers.jl.","category":"page"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"A simple yet valid @setup call would look like this:","category":"page"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"QUBODrivers.@setup Optimizer begin\n    name    = \"Super Sampler\"\n    version = v\"1.0.2\"\nend","category":"page"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"We expect that most users will be happy with this approach and it is likely that it will fit most use cases.","category":"page"},{"location":"manual/4-setup/#Attributes","page":"Sampler Setup","title":"Attributes","text":"","category":"section"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"The attributes parameter is also given by a begin...end block and contains the sampler's attributes. These attributes are used to configure the sampler's behavior and are accessed by the MOI.get method.","category":"page"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"QUBODrivers.@setup Optimizer begin\n    name    = \"Super Sampler\"\n    version = v\"1.0.2\"\n    attributes = begin\n        NumberOfReads[\"num_reads\"]::Integer = 1_000\n        SuperAttribute::String = \"super\"\n    end\nend","category":"page"},{"location":"manual/4-setup/#The-[QUBODrivers.sample](@ref)-method","page":"Sampler Setup","title":"The QUBODrivers.sample method","text":"","category":"section"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"QUBODrivers.sample","category":"page"},{"location":"manual/4-setup/#QUBODrivers.sample","page":"Sampler Setup","title":"QUBODrivers.sample","text":"sample(::AbstractSampler{T})::SampleSet{T} where {T}\n\n\n\n\n\n","category":"function"},{"location":"manual/4-setup/#The-[QUBODrivers.SampleSet]-collection","page":"Sampler Setup","title":"The [QUBODrivers.SampleSet] collection","text":"","category":"section"},{"location":"manual/4-setup/#A-complete-example","page":"Sampler Setup","title":"A complete example","text":"","category":"section"},{"location":"manual/4-setup/","page":"Sampler Setup","title":"Sampler Setup","text":"module SuperSampler\n\nimport QUBODrivers\nimport QUBODrivers: QUBOTools\nimport MathOptInterface as MOI\n\n@doc raw\"\"\"\n    SuperSampler.Optimizer\n\nThis sampler is super!\n\"\"\"\nQUBODrivers.@setup Optimizer begin\n    name    = \"Super Sampler\"\n    version = v\"1.0.2\"\n    attributes = begin\n        NumberOfReads[\"num_reads\"]::Integer = 1_000\n        SuperAttribute::String = \"super\"\n    end\nend\n\nfunction QUBODrivers.sample(sampler::Optimizer{T}) where {T}\n    # ~ Is your annealer running on the Ising Model? Have this:\n    n, h, J, α, β = QUBOTools.ising(\n        sampler,\n        :dense; # Here we opt for a dense matrix representation\n        sense = :max,\n    )\n\n    # ~ Retrieve Attributes using MathOptInterface ~ #\n    num_reads  = MOI.get(sampler, NumberOfReads())\n    super_attr = MOI.get(sampler, SuperAttribute())\n\n    # ~ Do some sampling ~ #\n    samples = QUBOTools.Sample{T,Int}[]\n\n    clock = @timed for _ = 1:num_reads\n        ψ = super_sample(n, h, J, super_attr)\n        λ = QUBOTools.value(ψ, h, J, α, β)\n\n        s = QUBOTools.Sample{T,Int}(ψ, λ)\n\n        push!(samples, s)\n    end\n\n    # ~ Store some metadata ~ #\n    metadata = Dict{String,Any}(\n        \"num_reads\"  => num_reads,\n        \"super_attr\" => super_attr,\n        \"time\"       => clock.time,\n    )\n\n    # ~ Return a SampleSet ~ #\n    return QUBOTools.SampleSet(samples, metadata; sense=:max, domain=:spin)\nend\n\nfunction super_sample(n, h, J, super_attr)\n    # ~ Do some super sampling (using C/C++) ~ #\n    ψ = ccall(\n        :super_sample,\n        Vector{Int},\n        (\n            Cint,\n            Ptr{Float64},\n            Ptr{Ptr{Float64}},\n            Cstring\n        ),\n        n,\n        h,\n        J,\n        super_attr,\n    )\n\n    return ψ\nend\n\nend # module","category":"page"},{"location":"manual/2-solve/#Solving-QUBO","page":"Solving QUBO","title":"Solving QUBO","text":"","category":"section"},{"location":"manual/2-solve/#Solving-Simple-QUBO-Model-with-QUBODrivers'-[RandomSampler.Optimizer](@ref)","page":"Solving QUBO","title":"Solving Simple QUBO Model with QUBODrivers' RandomSampler.Optimizer","text":"","category":"section"},{"location":"manual/2-solve/","page":"Solving QUBO","title":"Solving QUBO","text":"using JuMP\nusing QUBODrivers\n\nmodel = Model(RandomSampler.Optimizer)\n\nQ = [\n    -1.0  2.0  2.0\n     2.0 -1.0  2.0\n     2.0  2.0 -1.0\n]\n\n@variable(model, x[1:3], Bin)\n@objective(model, Min, x' * Q * x)\n\noptimize!(model)","category":"page"},{"location":"manual/2-solve/#Recover-Results","page":"Solving QUBO","title":"Recover Results","text":"","category":"section"},{"location":"manual/2-solve/","page":"Solving QUBO","title":"Solving QUBO","text":"for i = 1:result_count(model)\n    xi = value.(x; result=i)              # Solution vector\n    yi = objective_value(model; result=i) # Energy\n\n    println(\"f($xi) = $(yi)\")\nend","category":"page"},{"location":"manual/3-samplers/#Samplers","page":"Samplers","title":"Samplers","text":"","category":"section"},{"location":"manual/3-samplers/#Utility-Samplers","page":"Samplers","title":"Utility Samplers","text":"","category":"section"},{"location":"manual/3-samplers/#Exact-Sampler","page":"Samplers","title":"Exact Sampler","text":"","category":"section"},{"location":"manual/3-samplers/","page":"Samplers","title":"Samplers","text":"QUBODrivers.ExactSampler.Optimizer","category":"page"},{"location":"manual/3-samplers/#QUBODrivers.ExactSampler.Optimizer","page":"Samplers","title":"QUBODrivers.ExactSampler.Optimizer","text":"ExactSampler.Optimizer{T}\n\nThis sampler performs an exhaustive search over all 2^n possible states.\n\nwarn: Warn\nDue to the exponetially large amount of visited states, it is not possible to use this sampler for problems any larger than 20 variables big.\n\n\n\n\n\n","category":"type"},{"location":"manual/3-samplers/#Random-Sampler","page":"Samplers","title":"Random Sampler","text":"","category":"section"},{"location":"manual/3-samplers/","page":"Samplers","title":"Samplers","text":"QUBODrivers.RandomSampler.Optimizer","category":"page"},{"location":"manual/3-samplers/#QUBODrivers.RandomSampler.Optimizer","page":"Samplers","title":"QUBODrivers.RandomSampler.Optimizer","text":"RandomSampler.Optimizer{T}\n\nAttributes\n\nRandomSeed, \"seed\": Random seed to initialize the random number generator.\nNumberOfReads, \"num_reads\": Number of random states sampled per run.\nRandomGenerator, \"rng\": Random Number Generator instance.\n\n\n\n\n\n","category":"type"},{"location":"manual/3-samplers/#Identity-Sampler","page":"Samplers","title":"Identity Sampler","text":"","category":"section"},{"location":"manual/3-samplers/","page":"Samplers","title":"Samplers","text":"QUBODrivers.IdentitySampler.Optimizer","category":"page"},{"location":"manual/3-samplers/#QUBODrivers.IdentitySampler.Optimizer","page":"Samplers","title":"QUBODrivers.IdentitySampler.Optimizer","text":"IdentitySampler.Optimizer{T}\n\nThis sampler selects precisely the state vector provided as warm-start.\n\n\n\n\n\n","category":"type"},{"location":"manual/3-samplers/#Showcase","page":"Samplers","title":"Showcase","text":"","category":"section"},{"location":"manual/3-samplers/","page":"Samplers","title":"Samplers","text":"Before explaining in detail how to use this package, it's good to list a few examples for the reader to grasp. Below, there are links to the files containing the actual interface implementations. These are mostly thin wrappers interfacing with common algorithms and heuristics written in Python, Julia or C/C++.","category":"page"},{"location":"manual/3-samplers/","page":"Samplers","title":"Samplers","text":"Project Source Code\nDWave.jl DWave\nDWaveNeal.jl DWaveNeal\nIsingSolvers.jl GreedyDescent\n ILP\n MCMCRandom\nQuantumAnnealingInterface.jl QuantumAnnealingInterface\nCIMOptimizer.jl CIMOptimizer","category":"page"},{"location":"manual/6-benchmarks/#Benchmarking","page":"Benchmarking","title":"Benchmarking","text":"","category":"section"},{"location":"booklet/1-intro/#QUBODrivers.jl-Booklet","page":"Itroduction","title":"QUBODrivers.jl Booklet","text":"","category":"section"},{"location":"booklet/1-intro/","page":"Itroduction","title":"Itroduction","text":"This booklet aims to provide an advanced overview of the QUBODrivers.jl package, delving into the details of the package's inner workings. It is meant to discuss the package's design choices and provide a guide for developers who wish not only to implement new interfaces but also to extend the package's functionality. Reading this booklet is not required to use the package, but it is strongly recommended for those who wish to contribute to the project.","category":"page"},{"location":"booklet/1-intro/#Table-of-Contents","page":"Itroduction","title":"Table of Contents","text":"","category":"section"},{"location":"booklet/1-intro/","page":"Itroduction","title":"Itroduction","text":"Pages = [\"2-interface.md\", \"3-attributes.md\"]\nDepth = 2","category":"page"},{"location":"booklet/2-interface/#Sampler-Interface","page":"Sampler Interface","title":"Sampler Interface","text":"","category":"section"},{"location":"booklet/2-interface/","page":"Sampler Interface","title":"Sampler Interface","text":"QUBODrivers.AbstractSampler","category":"page"},{"location":"booklet/2-interface/#QUBODrivers.AbstractSampler","page":"Sampler Interface","title":"QUBODrivers.AbstractSampler","text":"AbstractSampler{T} <: MOI.AbstractOptimizer\n\n\n\n\n\n","category":"type"},{"location":"booklet/2-interface/","page":"Sampler Interface","title":"Sampler Interface","text":"QUBODrivers.set_model!","category":"page"},{"location":"booklet/2-interface/#QUBODrivers.set_model!","page":"Sampler Interface","title":"QUBODrivers.set_model!","text":"set_model!\n\n\n\n\n\n","category":"function"},{"location":"manual/5-tests/#Test-Suite","page":"Test Suite","title":"Test Suite","text":"","category":"section"},{"location":"manual/5-tests/","page":"Test Suite","title":"Test Suite","text":"Besides establishing the connection between QUBO solvers and JuMP, this package also provides a test suite to ensure that the interface is implemented correctly.","category":"page"},{"location":"manual/5-tests/","page":"Test Suite","title":"Test Suite","text":"QUBODrivers.test","category":"page"},{"location":"manual/5-tests/#QUBODrivers.test","page":"Test Suite","title":"QUBODrivers.test","text":"test(optimizer::Type{S}; examples::Bool=false) where {S<:AbstractSampler}\ntest(config!::Function, optimizer::Type{S}; examples::Bool=false) where {S<:AbstractSampler}\n\n\n\n\n\n","category":"function"},{"location":"#QUBODrivers.jl-Documentation","page":"Home","title":"QUBODrivers.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package aims to provide a common MOI-compliant API for QUBO Sampling & Annealing machines. It also contains a few utility samplers and testing tools for performance comparison, sanity checks and basic analysis features.","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"QUBODrivers.jl is registered in Julia's General Registry and is available for download using the standard package manager.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg\n\njulia> Pkg.add(\"QUBODrivers\")","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using JuMP\nusing QUBODrivers\n\nmodel = Model(ExactSampler.Optimizer)\n\nQ = [\n    -1.0  2.0  2.0\n     2.0 -1.0  2.0\n     2.0  2.0 -1.0\n]\n\n@variable(model, x[1:3], Bin)\n@objective(model, Min, x' * Q * x)\n\noptimize!(model)\n\nfor i = 1:result_count(model)\n    xi = value.(x; result=i)\n    yi = objective_value(model; result=i)\n\n    println(\"f($xi) = $yi\")\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!– ## Citing QUBODrivers.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"@software{QUBODrivers.jl:2023,\n  author    = {Pedro Xavier and Pedro Ripper and Tiago Andrade and Joaquim Garcia and David Bernal},\n  title     = {QUBODrivers.jl},\n  month     = {apr},\n  year      = {2023},\n  publisher = {Zenodo},\n  version   = {v0.1.0},\n  doi       = {10.5281/zenodo.6390515},\n  url       = {https://doi.org/10.5281/zenodo.6390515}\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"–>","category":"page"},{"location":"booklet/3-attributes/#Attributes","page":"Attribute System","title":"Attributes","text":"","category":"section"},{"location":"booklet/3-attributes/#API","page":"Attribute System","title":"API","text":"","category":"section"},{"location":"booklet/3-attributes/","page":"Attribute System","title":"Attribute System","text":"QUBODrivers.SamplerAttribute","category":"page"},{"location":"booklet/3-attributes/#QUBODrivers.SamplerAttribute","page":"Attribute System","title":"QUBODrivers.SamplerAttribute","text":"SamplerAttribute\n\n\n\n\n\n","category":"type"},{"location":"booklet/3-attributes/","page":"Attribute System","title":"Attribute System","text":"QUBODrivers.RawSamplerAttribute\nQUBODrivers.@raw_attr_str","category":"page"},{"location":"booklet/3-attributes/#QUBODrivers.RawSamplerAttribute","page":"Attribute System","title":"QUBODrivers.RawSamplerAttribute","text":"RawSamplerAttribute{key}\n\n\n\n\n\n","category":"type"},{"location":"booklet/3-attributes/#QUBODrivers.@raw_attr_str","page":"Attribute System","title":"QUBODrivers.@raw_attr_str","text":"@raw_attr_str\n\n\n\n\n\n","category":"macro"},{"location":"booklet/3-attributes/","page":"Attribute System","title":"Attribute System","text":"QUBODrivers.get_raw_attr\nQUBODrivers.set_raw_attr!\nQUBODrivers.default_raw_attr","category":"page"},{"location":"booklet/3-attributes/#QUBODrivers.get_raw_attr","page":"Attribute System","title":"QUBODrivers.get_raw_attr","text":"get_raw_attr\n\n\n\n\n\n","category":"function"},{"location":"booklet/3-attributes/#QUBODrivers.set_raw_attr!","page":"Attribute System","title":"QUBODrivers.set_raw_attr!","text":"set_raw_attr!\n\n\n\n\n\n","category":"function"},{"location":"booklet/3-attributes/#QUBODrivers.default_raw_attr","page":"Attribute System","title":"QUBODrivers.default_raw_attr","text":"default_raw_attr\n\n\n\n\n\n","category":"function"},{"location":"booklet/3-attributes/#An-advanced-example","page":"Attribute System","title":"An advanced example","text":"","category":"section"},{"location":"booklet/3-attributes/","page":"Attribute System","title":"Attribute System","text":"module SuperSampler\n\nimport QUBODrivers\nimport QUBODrivers: QUBOTools\nimport MathOptInterface as MOI\n\nQUBODrivers.@setup Optimizer begin\n    name    = \"Super Sampler\"\n    version = v\"1.0.2\"\n    attributes = begin\n        NumberOfReads[\"num_reads\"]::Integer  = 100_000\n        SuperAttribute[\"super_attr\"]::String = \"super\"\n    end\nend\n\nfunction MOI.set(sampler::Optimizer, attr::raw_attr\"\", value)\n    if !(value isa Integer)\n        error(\"'num_reads' must be an integer\")\n    else\n        QUBODrivers.set_raw_attr!(sampler, attr, value)\n    end\n\n    return nothing\nend\n\nfunction MOI.set(sampler::Optimizer, attr::raw_attr\"super_attr\", value)\n    if !(value isa AbstractString)\n        error(\"'super_attr' must be a string\")\n    elseif !(value ∈ (\"super\", \"ultra\", \"mega\"))\n        error(\"'super_attr' must be one of the following: 'super', 'ultra', 'mega'\")\n    else\n        QUBODrivers.set_raw_attr!(sampler, attr, value)\n    end\n\n    return nothing\nend\n\nend # SuperSampler module","category":"page"},{"location":"manual/1-intro/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"manual/1-intro/#QUBO","page":"Introduction","title":"QUBO","text":"","category":"section"},{"location":"manual/1-intro/","page":"Introduction","title":"Introduction","text":"An optimization problem is in its QUBO form if it is written as","category":"page"},{"location":"manual/1-intro/","page":"Introduction","title":"Introduction","text":"beginarrayrl\n           min  alpha left mathbfxmathbfQmathbfx + mathbfellmathbfx + beta right \n    textst  mathbfx in S cong mathbbB^n\nendarray","category":"page"},{"location":"manual/1-intro/","page":"Introduction","title":"Introduction","text":"with linear terms mathbfell in mathbbR^n and quadratic mathbfQ in mathbbR^n times n. alpha beta in mathbbR are, respectively, the scaling and offset factors.","category":"page"},{"location":"manual/1-intro/","page":"Introduction","title":"Introduction","text":"The MOI-JuMP optimizers defined using the QUBODrivers.AbstractSampler{T} <: MOI.AbstractOptimizer interface only support models given in the QUBO form. QUBODrivers.jl employs QUBOTools on many tasks involving data management and querying. It is worth taking a look at QUBOTool's docs.","category":"page"},{"location":"manual/1-intro/#Table-of-Contents","page":"Introduction","title":"Table of Contents","text":"","category":"section"},{"location":"manual/1-intro/","page":"Introduction","title":"Introduction","text":"Pages = [\"2-solve.md\", \"3-samplers.md\", \"4-setup.md\", \"5-tests.md\", \"6-benchmarks.md\"]\nDepth = 2","category":"page"}]
}
